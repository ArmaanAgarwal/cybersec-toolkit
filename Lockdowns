import random
import matplotlib.pyplot as plt
import pandas as pd
from IPython.display import display, Markdown

# üîê Encryption algorithms map (ensure this is consistent across your full project)
ENCRYPTION_ALGORITHMS = {
    "Ransomware": ["AES", "Blowfish", "RSA"]
}

# ‚úÖ Logger
def log_attack(attack_type, message):
    print(f"üîç Log -> {attack_type}: {message}")

# üîí Ransomware Attack Simulation (Improved)
def simulate_ransomware_simple():
    display(Markdown("## üõ°Ô∏è Simulating Ransomware Attack"))

    # Simulated files
    fake_files = ["important_doc.txt", "financial_report.pdf", "budget_plan.xlsx", "presentation.pptx"]
    encrypted_files = [f"{f}.locked" for f in fake_files]
    decrypted_files = [f.replace(".locked", ".decrypted") for f in encrypted_files]

    # Simulated progress data
    encryption_rate = [random.randint(60, 90) for _ in fake_files]
    decryption_rate = [random.randint(80, 100) for _ in fake_files]

    # Summary table
    df = pd.DataFrame({
        "Original File": fake_files,
        "Encrypted As": encrypted_files,
        "Encryption %": encryption_rate,
        "Decrypted As": decrypted_files,
        "Decryption %": decryption_rate
    })
    display(df)

    # Encryption progress chart
    plt.figure(figsize=(7, 3))
    plt.bar(df["Original File"], df["Encryption %"], color='crimson')
    plt.title("üìä Ransomware Encryption Progress")
    plt.ylabel("Encryption (%)")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Decryption progress chart
    plt.figure(figsize=(7, 3))
    plt.bar(df["Decrypted As"], df["Decryption %"], color='forestgreen')
    plt.title("üìä Ransomware Decryption Progress")
    plt.ylabel("Decryption (%)")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Encryption defense recommendations
    recommended = ENCRYPTION_ALGORITHMS.get("Ransomware", ["No recommendation found"])
    display(Markdown("### üîê **Recommended Encryption to Prevent Ransomware Attacks:**"))
    for algo in recommended:
        display(Markdown(f"- `{algo}`"))

    # Log attack
    log_attack("Ransomware", f"Encrypted {len(fake_files)} files. Recommended defense: {', '.join(recommended)}")

    display(Markdown("### ‚úÖ **Ransomware Attack Simulation Completed**"))

# ‚úÖ Run the simulation
simulate_ransomware_simple()
